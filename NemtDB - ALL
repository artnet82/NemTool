**Вариант 1: SQLite**

SQLite является легким встраиваемым SQL-движком базы данных. Вот пример, как вы можете изменить код для использования SQLite:

1. Установите SQLite на свою систему, если он еще не установлен. Вы можете найти инструкции по установке SQLite на официальном сайте проекта SQLite.

2. Импортируйте соответствующий модуль для работы с SQLite в вашем скрипте. Например, если вы используете Lua, вы можете использовать библиотеку LuaSQL для работы с базой данных SQLite.

3. Измените код создания базы данных на следующий образом:

```lua
local sqlite3 = require("luasql.sqlite3")

-- Создание подключения к базе данных SQLite
local env = sqlite3.sqlite3()
local conn = env:connect("nemdb.db")

-- Создание таблицы
conn:execute([[CREATE TABLE IF NOT EXISTS NemDB (
    id INTEGER PRIMARY KEY,
    name TEXT
)]])
```

4. Замените соответствующие операции чтения и записи данных в вашем коде на соответствующие операции для SQLite. Например, для выполнения SQL-запроса вы можете использовать метод `execute()`:

```lua
-- Вставка данных
conn:execute([[INSERT INTO NemDB (id, name) VALUES (1, 'Иван Иванов')]])
conn:execute([[INSERT INTO NemDB (id, name) VALUES (2, 'Сергей Петров')]])

-- Завершение работы с базой данных
conn:close()
```

**Вариант 2: PostgreSQL**

PostgreSQL является мощной реляционной базой данных с поддержкой множества функций. Вот пример, как вы можете изменить код для использования PostgreSQL:

1. Установите PostgreSQL на свою систему, если он еще не установлен. Вы можете найти инструкции по установке PostgreSQL на официальном сайте проекта PostgreSQL.

2. Импортируйте соответствующий модуль для работы с PostgreSQL в вашем скрипте. Например, если вы используете Lua, вы можете использовать библиотеку LuaSQL для работы с базой данных PostgreSQL.

3. Измените код создания базы данных на следующий образом:

```lua
local luasql = require("luasql.postgres")

-- Создание подключения к базе данных PostgreSQL
local env = luasql.postgres()
local conn = env:connect("dbname=nembd user=your_username password=your_password")

-- Создание таблицы
conn:execute([[CREATE TABLE IF NOT EXISTS NemDB (
    id SERIAL PRIMARY KEY,
    name TEXT
)]])
```

4. Замените соответствующие операции чтения и записи данных в вашем коде на соответствующие операции для PostgreSQL. Например, для выполнения SQL-запроса вы можете использовать метод `execute()`:

```lua
-- Вставка данных
conn:execute([[INSERT INTO NemBD (name) VALUES ('Vasia Ivanov')]])
conn:execute([[INSERT INTO NemBD (name) VALUES ('Petya Ivanov')]])

-- Завершение работы с базой данных
conn:close()
```

Пожалуйста, убедитесь, что вы изучили документацию выбранной базы данных и следуйте ее рекомендациям и лучшим практикам для эффективного использования и безопасности вашей базы данных.
