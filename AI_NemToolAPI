import psycopg2
from transformers import BertTokenizer, BertForSequenceClassification
import torch

class NemToolAPI:
    def __init__(self, host, port, database, user, password):
        try:
            self.connection = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=user,
                password=password
            )
            self.cursor = self.connection.cursor()
        except psycopg2.Error as e:
            print(f"Error: {e}")

    def create_table(self, table_name, columns):
        query = f"CREATE TABLE {table_name} ({', '.join(columns)})"
        self.cursor.execute(query)
        self.connection.commit()

    def insert_data(self, table_name, data):
        columns = ', '.join(data.keys())
        placeholders = ', '.join(['%s'] * len(data))
        query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
        self.cursor.execute(query, list(data.values()))
        self.connection.commit()

    def select_data(self, table_name, condition=None):
        query = f"SELECT * FROM {table_name}"
        if condition:
            query += f" WHERE {condition}"
        try:
            self.cursor.execute(query, ())
            return self.cursor.fetchall()
        except psycopg2.Error as e:
            print(f"Error: {e}")
            return None

    def add_column(self, table_name, column_name, column_type):
        query = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
        self.cursor.execute(query)
        self.connection.commit()

    def close_connection(self):
        self.cursor.close()
        self.connection.close()

# Загрузите предобученную модель и токенизатор
model_name = 'bert-base-uncased'
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Загрузите текстовые данные из базы данных с помощью класса NemToolAPI
nem_tool_api = NemToolAPI(host='localhost', port=5432, database='my_db', user='my_user', password='my_password')
text_data = nem_tool_api.select_data('my_table')

if text_data is not None:
    # Токенизируйте текстовые данные
    input_ids = tokenizer(text_data, return_tensors='pt', padding=True, truncation=True)

    # Выполните анализ настроения с помощью предобученной модели
    outputs = model(input_ids)
    predictions = torch.argmax(outputs.logits, dim=1)

    # Напечатайте прогнозы
    print(predictions)
else:
    print("Error: Unable to retrieve text data from the database")
